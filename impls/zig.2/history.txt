[1 2 (+ 1 2 3)]
[1 2 (1 2 3)]
(1 2 (1 2 3))
[1 2 (+ 1 2 3)]
[1 2 (sadasd 1 2 3)]
(+ 1 2 3)
[1 2 (+ 1 2 3)]
(+ 1 2 3 (- 5 2))
"123"
(1 2 3)
"123"
(1 2 3)
(+ 1 2 3)
[1 2 3 (+ 1 2 3)]
(1 2 3 [1 2 3 (+ 1 2 3)])
(+ [1 2 3] [1 2 3 (+ 1 2 3)])
(+ [1 2 3] [1 2 3])
(+ (1 2 3) (3 4 6))
(+ (1 2 3) (3 4 6) [5 "a" 88])
(+ [1 2 3] (1 2 3))
{"a" (+ 1 2)}
(+ [1 2 3] (1 2 3))
(1 2 3 [1 2 3 (+ 1 2 3)])
{"a" (+ 1 2)}
{"a" 1}
{"a" (+ 1 2)}
(def! a 3)
a
(def! a 3)
a
(def! a 3)
a
(def! a 3)
a
(def! a 3)
a
(def! a 3)
a
(def! a 3)
a
(def! a 3)
a
(def! a 3)
a
(def! a 3)
a
(let* [a 1] 1)
(def! a 3)
abc
(def! a q)
(let* [a 1] 1)
(let* [a 1] a)
(def! x 2)
x
(let* [a 1] a)
(let* (a 1) a)
(let* [a 1] a)
(let* (a 1) a)
(let* (a 3 DEBUG-EVAL "") a)
(let* (a 3 DEBUG-EVAL true) a)
(let* (a 3 DEBUG-EVAL false) a)
(do (+ 1 2 3))
(do (+ 1 2 3) (1 2))
(do)
(do (+ 1 2 3) (1 2))
(do (+ 1 2 3) (1 2) ["hello"])
(do (+ 1 2 3) (1 2) ["hello"] (def! a 5))
a
(do (+ 1 2 3) (1 2) ["hello"] (def! a 5))
a
(if (true) a)
(if (= (+1 2 3) 6) a)
(if (nil) a (+ 1 2 3))
(do (+ 1 2 3) (1 2) ["hello"] (def! a 5))
(if (nil) a (+ 1 2 3))
(if (nil) a)
(if (false) a)
(if (true) a)
(if (true) (+ 1 2 3))
(if (false) (+ 1 2 3))
(if (false) (+ 1 2 3) nil)
(if (false) (+ 1 2 3) (+ 2 3))
(if false (+ 1 2 3) (+ 2 3))
(if nil (+ 1 2 3) (+ 2 3))
(if (false) (+ 1 2 3) (+ 2 3))
(if (false) (+ 1 2 3) nil)
(if nil (+ 1 2 3) (+ 2 3))
(do (+ 1 2 3) (1 2) ["hello"] (def! a 5))
(if (nil) a (+ 1 2 3))
(if (= (+1 2 3) 6) a)
(1 2 3)
("1" 2 3)
(if (= (+1 2 3) 6) a)
(= (+1 2 3) 6)
(if (= (+1 2 3) 6) a)
(if (nil) a (+ 1 2 3))
(do (+ 1 2 3) (1 2) ["hello"] (def! a 5))
a
(if (nil) a (+ 1 2 3))
