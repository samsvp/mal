((fn* () a))
(def! f (fn* () a))
(f)
(def! a 5)
(f)
( (fn* (a) a) )
( (fn* (a) a) 7)
( (fn* (a) (+ a 1)) 10)
( (fn* (a b) (+ a b)) 2 3)
(do (+ 1 2 3) (1 2) ["hello"] (def! a 5))
(+ 1 2 3)
(+ 1 2 3 4 5 )
(+ (1 2 3))
(+ (1 2 3) (4 5 6))
(+ ("a") ("a"))
(+ ("a") ("b"))
(+ ("a") ("b" "c"))
(+ ("a" "d" ) ("b" "c"))
(+ (1 2 3) (4 5 6))
(+ "" "dsasndjsandsadsadas")
(+ "" "dsasndjsandsadsadadasdsadsadsadsadasdsadasfdsfgfdgf hfghfghfgh s")
{"a" 1}
{"a" 1 "b" 5}
{"a" 1 "b" 5 "c" 10}
(def a "hello")
(def! a "hello")
a
(def! a "hello")
a
(def! a "hello")
{"a" 1 "b" 5 "c" 10}
(def! a "hello")
{a 1 "b" 5 "c" 10}
(def! a "hello")
{a 1 "b" 5 "c" 10}
(def! a "hello")
{a 1 "b" 5 "c" 10}
(def! a "hello")
{a 1 "b" 5 "c" 10}
(1 2 3)
(1 2 3 4 5)
(+ (1 2 3 4 5) (6 7))
(list)
(list 1 2)
(list? 1 2)
(list? ())
(list? 1)
(list? [])
(empty? [])
(empty? [1 2])
{a 1 "b" 5 "c" 10}
{"a" 1 "b" 5 "c" 10}
{a 1 "b" 5 "c" 10}
{2 10}
{"a" 2 2 10}
{a 2 2 10}
{2 10}
{"a" 2 2 10}
(count {"a" 2})
( (fn* (a) (+ a 1)) 10)
( (fn* (a b) (+ a b)) 2 3)
(def! f (fn* () a))
(f)
(def! a 8)
(f)
(= 1 2 3)
(= 1 1 1 1)
(= 1 1 1 1 3)
(< 1 1 1 1 3)
(< 0 1 1 1 1 3)
(< 1 1 1 1 3)
(<= 1 1 1 1 3)
(> 1 1 1 1 3)
(> 5 1 1 1 3)
( ( (fn* (a) (fn* (b) (+ a b))) 5) 7)
(let* [b 0 f (fn* [] b)] (let* [b 1] (f)))
(fn* [b] b)
((fn* [b] b))
((fn* [b] b) 1)
(let* [b 0 f (fn* [] b)] (f))
(let* [f (fn* [] 0)] (f))
(prn "hello")
(do (1) (2))
(let* [b 0 f (fn* [] b)] (let* [b 1] (f)))
                            std.debug.print("new s is :{s}\n", .{s.toString(allocator) catch unreachable});
(let* [b 0 f (fn* [] b)] (let* [b 1] (f)))
(let* (z 9) z)
(let* [b 0 f (fn* [] b)] (let* [b 1] (f)))
(def! sumdown (fn* (N) (if (> N 0) (+ N (sumdown  (- N 1))) 0)))
(sumdown 1)
(sumdown 2)
(def! sumdown (fn* (N) (if (> N 0) (+ N (sumdown  (- N 1))) 0)))
(sumdown 2)
(def! sumdown (fn* (N) (if (> N 0) (+ N (sumdown  (- N 1))) 0)))
(sumdown 2)
(def! sumdown (fn* (N) (if (> N 0) (+ N (sumdown  (- N 1))) 0)))
(sumdown 2)
(def! sumdown (fn* (N) (if (> N 0) (+ N (sumdown  (- N 1))) 0)))
(sumdown 1)
