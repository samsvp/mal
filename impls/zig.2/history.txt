(slurp "core.zig")
(read-string "123") 
(read-string "(1") 
(read-string "(1 2 3)") 
(def! mal-prog (list + 1 2))
(eval mal-prog)
mal-prog
(eval (+ 1 2 3))
(let* (b 12) (do (eval (read-string "(def! aa 7)")) aa ))
aa
read-string "(def! aa 7)"
(read-string "(def! aa 7)")
(eval (read-string "(def! aa 7)"))
aa
(eval (read-string "(def! aa 7)"))
aa
(eval (read-string "(def! aa 7)"))
(read-string "(def! aa 7)")
(eval (def! aa 7))
(read-string "(def! aa 7)")
(eval (read-string "(def! aa 7)"))
aa
(let* (b 12) (do (eval (read-string "(def! aa 7)")) aa ))
(def! aa 1)
(read-string "(def! aa 7)")
(eval (read-string "(def! aa 7)"))
(let* (b 12) (do (eval (read-string "(def! aa 7)")) aa ))
(def! mal-prog (list + 1 2))
(list + 1 2)
mal-prog
(let* [] (list + 1 2))
(let* [DEBUG-EVAL true] (list + 1 2))
(let* [DEBUG-EVAL true] (list 1 2))
(let* [] (list (fn* [a b] (+ a b)) 1 2))
(let* [] (eval (list (fn* [a b] (+ a b)) 1 2)))
(let* [] (eval (list + 1 2)))
(def! mal-prog (list + 1 2))
(eval mal-prog)
(def! mal-prog (list + 1 2))
(eval mal-prog)
(let* [] (list + 1 2))
(do (eval (read-string "(def! aa 7)")) aa )
(let* [] (list (fn* [a b] (+ a b)) 1 2))
(let* [] (eval (list (fn* [a b] (+ a b)) 1 2)))
(let* [] (eval (+ 1 2)))
(let* [] (eval ((fn* [a] a) 1)))
(let* [] ((fn* [a] a) 1))
((fn* [a] a) 1)
(let* [] (fn* [a] a) 1)
(let* [] (fn* [a] a) 1))
(let* [] ((fn* [a] a) 1))
(let* [] 1)
(let* [] ((fn* [a] a) 1))
( (fn* (f x) (f x)) (fn* (a) (+ 1 a)) 7)
(let* [] ((fn* [a] a) 1))
( (fn* (f x) (f x)) (fn* (a) (+ 1 a)) 7)
(let* [] ((fn* [a] a) 1))
( (fn* (f x) (f x)) (fn* (a) (+ 1 a)) 7)
(let* [] ( (fn* (f x) (f x)) (fn* (a) (+ 1 a)) 7) )
(let* [] ((fn* [a] a) 1))
(let* [] ( (fn* (f x) (f x)) (fn* (a) (+ 1 a)) 7) )
(let* [] ((fn* [a] a) 1))
(let* [] ( (fn* (f x) (f x)) (fn* (a) (+ 1 a)) 7) )
(let* [] ((fn* [] 0)))
(let* [] ((fn* [a] a) 1))
(def! mal-prog (list + 1 2))
(eval mal-prog)
(load-file "../tests/incA.mal")
(def! load-file (fn* (f) (eval (read-string (str "(do " (slurp f) "\nnil)")))))
(load-file "../tests/incA.mal")
(def! load-file (fn* (f) (eval (read-string (str "(do " (slurp f) " nil)")))))
(load-file "../tests/incA.mal")
(eval (read-string (str "(do " (slurp "../tests/incA.mal") " nil)")))
str
(eval (read-string (str "(do " (slurp "../tests/incA.mal") " nil)")))
(str "(do " (slurp "../tests/incA.mal") " nil)")
load-file
(let* [DEBUG-EVAL true] (load-file "../tests/incA.mal"))
(eval (read-string "(nil)"))
(eval (read-string "(+ 1 2 3)"))
(read-string "(do nil)")
(eval "(do nil)")
(eval (read-string "(do nil)"))
(eval (do nil))
(eval (read-string "(do nil)"))
(load-file "../tests/incA.mal")
