(eval (read-string (str "(do " (slurp "../tests/incA.mal") " nil)")))
str
(eval (read-string (str "(do " (slurp "../tests/incA.mal") " nil)")))
(str "(do " (slurp "../tests/incA.mal") " nil)")
load-file
(let* [DEBUG-EVAL true] (load-file "../tests/incA.mal"))
(eval (read-string "(nil)"))
(eval (read-string "(+ 1 2 3)"))
(read-string "(do nil)")
(eval "(do nil)")
(eval (read-string "(do nil)"))
(eval (do nil))
(eval (read-string "(do nil)"))
(load-file "../tests/incA.mal")
(read-string "\"\n\"")
(read-string "\n")
(read-string "7 ;; comment")
(eval (read-string "(+ 2 3)"))
(slurp "../tests/test.txt")
(load-file "../tests/inc.mal")
(inc3 9)
(read-string "\"\n\"")
(read-string "(+ 1")
(load-file "../tests/computations.mal")
;;
;; a
(load-file "../tests/incB.mal")
(def! a 1)
(let* (a 2) (eval (read-string "a")))
(def! a 1)
(let* (a 2) (eval (read-string "a")))
(def! a 1)
(let* (a 2) (eval (read-string "a")))
(def! a 1)
(let* (a 2) (eval (read-string "a")))
"\"hello\""
"\"\n\""
(read-string "\"\n\"")
"\"\n\""
(read-string "\"\n\"")
"\"\n\""
(slurp "../tests/test.txt")
(atom 6)
(def! a (atom 6))
a
(deref a)
(atom? a)
(atom? "hello")
(def! a (atom 6))
(deref a)
(def! a (atom 6))
(deref a)
a
(def! a (atom 6))
(swap! a 15)
a
(def! a (atom 6))
(swap! a 15)
a
(def! a (atom 6))
(swap! a 15)
a
(def! a (atom 6))
(swap! a 15)
a
(def! a (atom 6))
(swap! a (fn* [a b] (+ a b)) 2 5)
a
(atom? a)
(def! a (atom 6))
(swap! a (fn* [a b] (+ a b)) 2 5)
(def! a (atom 6))
(swap! a (fn* [a b] (+ a b)) 2 5)
(def! a (atom 6))
(swap! a (fn* [a b] (+ a b)) 2 5)
a
(def! a (atom 6))
(swap! a (fn* [a b] (+ a b)) 2 5)
(def! a (atom 6))
(swap! a (fn* [a b] (+ a b)) 2 5)
a
(def! a (atom 6))
(swap! a (fn* [a b] ("hello")) 2 5)
a
(def! a (atom 6))
(load-file "../tests/inc.mal")
(inc3 9)
(def! a (atom 6))
(swap! a (fn* [a b] ("hello")) 2 5)
(def! a (atom 6))
(swap! a (fn* [a b] ("hello")) 2 5)
(swap! a (fn* [a b] ("hello")) 2)
(def! a (atom 6))
(swap! a (fn* [a b] (+ a b)) 2)
(def! a (atom 6))
(swap! a (fn* [a b] (+ a b)) 2)
(def! a (atom 6))
(swap! a (fn* [a b] (+ a b)) 2)
a
