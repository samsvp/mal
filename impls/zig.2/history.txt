(swap! a (fn* [a b] (+ a b)) 2)
(def! a (atom 6))
(swap! a (fn* [a b] (+ a b)) 2)
a
(def! a (atom 6))
@a
(def! a (atom 6))
@a
(def! a (atom 6))
@a
;;
;; hello
(load-file "../tests/computations.mal")
(quote abc)
(quote (list 1 2 3))
(prn (quote (1 2 3)))
(prn (quote (abc)))
(prn (quote abc))
(prn abc)
(def! a (atom 6))
a
(def! a (atom 6))
(reset! a 7)
(def! a (atom 6))
(reset! a ((fn* [] 0)))
a
(reset! a 7)
(reset! a ((fn* [] 0)))
(def! a (atom 6))
(reset! a ((fn* [] x)))
a
(reset! a 7)
(def! a (atom 6))
(swap!! a ((fn* [x] x)))
(swap! a ((fn* [x] x)))
(def! a (atom 6))
(swap! a ((fn* [x] x)))
(eval (swap! a ((fn* [x] x))))
a
(eval (swap! a ((fn* [x] (+ 1 x)))))
a
(def! a (atom 6))
(eval (swap! a (fn* [x] x)))
(eval (swap! a (fn* [x] (+ x 1))))
a
(def! a (atom 6))
(eval (swap! a (fn* [x] (+ x 1))))
(def! a (atom 6))
(eval (swap! a (fn* [x] (+ x 1))))
(def! a (atom 6))
(swap! a (fn* [x] (+ x 1)))
a
(def! a (atom 6))
(swap! a (fn* [x] (+ x 1)))
(def! a (atom 6))
(swap! a (fn* [x] (+ x 1)))
(def! a (atom 6))
(swap! a (fn* [x] (+ x 1)))
a
(def! a (atom 6))
a
(def! a (atom 6))
(swap! a (fn* [x] (+ x 1)))
(def! a (atom 6))
(swap! a (fn* [x] (+ x 1)))
(def! a (atom 6))
(swap! a (fn* [x] (+ x 1)))
(def! a (atom 6))
(swap! a (fn* [x] (+ x 1)))
(def! a (atom 6))
(swap! a (fn* [x] (+ x 1)))
(def! a (atom 6))
(swap! a (fn* [x] (+ x 1)))
(prn (quote (abc)))
(quote abc)
(quasiquote abc)
(def a 1)
(def! a 1)
a
(quasiquote (unquote a))
(quasiquote abc)
(quasiquote (unquote a))
(quasiquote abc)
(quasiquote (unquote a))
(def! a 1)
(quasiquote (unquote a))
(def! lst (quote (b c)))
lst
(quasiquote (a lst d))
(def! lst (quote (b c)))
(quasiquote (a lst d))
(quasiquote (a (unquote lst) d))
(quasiquote (a (splice-unquote lst) d))
(def! lst (quote (b c)))
(quasiquote (a (splice-unquote lst) d))
(def! lst (quote (b c)))
(quasiquote (a (splice-unquote lst) d))
(def! lst (quote (b c)))
(quasiquote (a (splice-unquote lst) d))
