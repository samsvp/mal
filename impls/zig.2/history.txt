(def! a (atom 6))
(swap! a (fn* [x] (+ x 1)))
(def! a (atom 6))
(swap! a (fn* [x] (+ x 1)))
(def! a (atom 6))
(swap! a (fn* [x] (+ x 1)))
(def! a (atom 6))
(swap! a (fn* [x] (+ x 1)))
(prn (quote (abc)))
(quote abc)
(quasiquote abc)
(def a 1)
(def! a 1)
a
(quasiquote (unquote a))
(quasiquote abc)
(quasiquote (unquote a))
(quasiquote abc)
(quasiquote (unquote a))
(def! a 1)
(quasiquote (unquote a))
(def! lst (quote (b c)))
lst
(quasiquote (a lst d))
(def! lst (quote (b c)))
(quasiquote (a lst d))
(quasiquote (a (unquote lst) d))
(quasiquote (a (splice-unquote lst) d))
(def! lst (quote (b c)))
(quasiquote (a (splice-unquote lst) d))
(def! lst (quote (b c)))
(quasiquote (a (splice-unquote lst) d))
(def! lst (quote (b c)))
(quasiquote (a (splice-unquote lst) d))
(cons 1 (2 3))
(concat (4 5) (2 3))
(def! a (list 1 2))
(def! b (list 3 4))
(concat a b (list 5 6))
a
b
(def! lst (quote (b c)))
(def! lst ('(b c)))
(def! lst '(b c))
(def! lst ('(b c)))
(let* (DEBUG-EVAL true) `(~a 3))
(let* (DEBUG-EVAL true) `7)
(let* (DEBUG-EVAL true) `a)
(let* (DEBUG-EVAL true) `(a 2))
(defmacro! one (fn* () 1))
one
(one)
(defmacro! two (fn* () 2))
(two)
(defmacro! unless (fn* (pred a b) `(if ~pred ~b ~a)))
(unless false 7 8)
(eval (unless false 7 8))
(defmacro! unless (fn* (pred a b) `(if ~pred ~b ~a)))
(unless false 7 8)
(defmacro! unless (fn* (pred a b) `(if ~pred ~b ~a)))
(unless false 7 8)
(defmacro! unless (fn* (pred a b) `(if ~pred ~b ~a)))
(unless false 7 8)
(defmacro! unless (fn* (pred a b) `(if ~pred ~b ~a)))
(unless false 7 8)
(defmacro! unless (fn* (pred a b) `(if ~pred ~b ~a)))
(unless false 7 8)
(defmacro! unless (fn* (pred a b) `(if ~pred ~b ~a)))
(unless false 7 8)
(defmacro! unless2 (fn* (pred a b) (list 'if (list 'not pred) a b)))
(unless2 false 7 8)
('not)
(not)
(defmacro! identity (fn* (x) x))
(defmacro! one (fn* () 1))
(one)
(defmacro! id (fn* (x) x))
(id 7)
(defmacro! identity (fn* (x) x))
(let* (a 123) (identity a))
()
(defmacro! unless2 (fn* (pred a b) (list 'if (list 'not pred) a b)))
(unless2 false 7 8)
(unless2 true 7 8)
(load-file ../tests/inc.mal)
(load-file "../tests/inc.mal")
(inc1)
(inc1 1)
(inc2 1)
(inc3 1)
(try* 123 (catch* e 456))
(try* abc (catch* exc (prn "exc is:" exc)))
(try* (abc 1 2) (catch* exc (prn "exc is:" exc)))
(try* (list 1) (catch* exc (prn "exc is:" exc)))
(try* (do (try* "t1" (catch* e "c1")) (throw "e1")) (catch* e "c2"))
(try* (try* (throw "e1") (catch* e (throw "e2"))) (catch* e "c2"))
(throw "err1")
(try* (throw "my exception") (catch* exc (do (prn "exc:" exc) 7)))
nth
