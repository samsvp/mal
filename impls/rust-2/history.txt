#V2
(println "abc\\ndef\\nghi")\n
(str "\\"")
(println "\\"")
(println "abc\\\\def\\\\ghi")
(println (list 1 2 "abc" "\\"") "def")
(let*)
(sum2 10 0)
(def! sum2 (fn* (n acc) (if (= n 0) acc (sum2 (- n 1) (+ n acc)))))
(sum2 10 0)
(def! fib (fn* (N) (if (= N 0) 1 (if (= N 1) 1 (+ (fib (- N 1)) (fib (- N 2)))))))
(fib 2)
(def! fib (fn* (N) (if (= N 0) 1 (if (= N 1) 1 (+ (fib (- N 1)) (fib (- N 2)))))))
(fib 2)
(fib 5)
(def! fib (fn* (N) (if (= N 0) 1 (if (= N 1) 1 (+ (fib (- N 1)) (fib (- N 2)))))))
(fib 2)
(fib 5)
(def! fib (fn* (N) (if (= N 0) 1 (if (= N 1) 1 (+ (fib (- N 1)) (fib (- N 2)))))))
(fib 2)
(fib 8)
(def! fib (fn* (N) (if (= N 0) 1 (if (= N 1) 1 (+ (fib (- N 1)) (fib (- N 2)))))))
(fib 8)
(fib 7)
\n(def! sum2 (fn* (n acc) (if (= n 0) acc (sum2 (- n 1) (+ n acc)))))\n
(sum2 10 0)
\n(def! sum2 (fn* (n acc) (if (= n 0) acc (sum2 (- n 1) (+ n acc)))))\n
(sum2 10 0)
(def! sum2 (fn* (n acc) (if (= n 0) acc (sum2 (- n 1) (+ n acc)))))
(sum2 10 0)
(read-string "(1 2 (3 4) nil)")
\n(= nil (read-string "nil"))
(do (do 1 2))
\n(read-string "7 ;; comment")
(slurp "7 ;; comment")
(slurp "step6_file.rs")
(def! mal-prog (list + 1 2))
(mal-prog)
(eval mal-prog)
(def! mal-prog (list + 1 2))
(eval mal-prog)
(def! mal-prog (list + 1 2))
(eval mal-prog)
(let* (b 12) (do (eval (read-string "(def! aa 7)")) aa ))
eval (read-string "(def! aa 7)"))
(eval (read-string "(def! aa 7)")))
aa
(eval (read-string "(def! aa 7)")))
aa
(read-string "(def! aa 7)"))
(eval (read-string "(def! aa 7)")))
aa
(eval (read-string "(def! aa 7)")))
aa
(eval (read-string "(def! aa 7)")))
(let* (b 12) (do (eval (read-string "(def! aa 7)")) aa ))
(load-file "../tests/incA.mal")
(inc4 3)
(load-file "../tests/incA.mal")
inc4
(load-file "../tests/incA.mal")
inc4
(def! fib (fn* (N) (if (= N 0) 1 (if (= N 1) 1 (+ (fib (- N 1)) (fib (- N 2)))))))
(fib 2)
(let* (b 12) (do (eval (read-string "(def! aa 7)")) aa ))
(let* (a 2) (eval (read-string "a")))
(def! a 1)
(let* (a 2) (eval (read-string "a")))
(let* (b 12) (do (eval (read-string "(def! aa 7)")) aa ))
aa
(let* (a 2) (eval (read-string "a")))
a
(def! a 1)
a
(let* (a 2) (eval (read-string "a")))
a
(let* (a 2) (eval (read-string "a")))
(def! a 1)
a
(let* (a 2) a)
a
(let* (a 2) a)
a
(def! a 1)
a
(let* (a 2) a)
a
(def! b 5)
b
(let* (a 2) a)
b
(def! a 1)
(let* (a 2) a)
a
(let* (a 2) (eval (read-string "a")))
a
(def! a 1)
a
(let* (a 2) (eval (read-string "a")))
(let* (b 12) (do (eval (read-string "(def! aa 7)")) aa ))
aa
